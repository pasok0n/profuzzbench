diff --git a/src/pool.c b/src/pool.c
index 2cdfafa47..315d5cc8f 100644
--- a/src/pool.c
+++ b/src/pool.c
@@ -408,6 +408,9 @@ const char *pr_pool_get_tag(pool *p) {
 
 /* Release the entire free block list */
 static void pool_release_free_block_list(void) {
+
+  return;
+
   union block_hdr *blok = NULL, *next = NULL;
 
   pr_alarms_block();
@@ -421,10 +424,11 @@ static void pool_release_free_block_list(void) {
   pr_alarms_unblock();
 }
 
+__attribute__ ((noinline))
 struct pool_rec *make_sub_pool(struct pool_rec *p) {
   union block_hdr *blok;
   pool *new_pool;
-
+  /*
   pr_alarms_block();
 
   blok = new_block(0, FALSE);
@@ -449,12 +453,17 @@ struct pool_rec *make_sub_pool(struct pool_rec *p) {
   pr_alarms_unblock();
 
   return new_pool;
+  */
+  return malloc(sizeof(struct pool_rec));
 }
 
-struct pool_rec *pr_pool_create_sz(struct pool_rec *p, size_t sz) {
+struct pool_rec *
+__attribute__ ((noinline))
+pr_pool_create_sz(struct pool_rec *p, size_t sz) {
   union block_hdr *blok;
   pool *new_pool;
 
+  /*
   pr_alarms_block();
 
   blok = new_block(sz + POOL_HDR_BYTES, TRUE);
@@ -474,6 +483,8 @@ struct pool_rec *pr_pool_create_sz(struct pool_rec *p, size_t sz) {
       new_pool->sub_next->sub_prev = new_pool;
 
     p->sub_pools = new_pool;
+    */
+    return malloc(sizeof(struct pool_rec));
   }
 
   pr_alarms_unblock();
@@ -499,6 +510,8 @@ void free_pools(void) {
 
 static void clear_pool(struct pool_rec *p) {
 
+  return;
+
   /* Sanity check. */
   if (p == NULL) {
     return;
@@ -528,6 +541,9 @@ static void clear_pool(struct pool_rec *p) {
 }
 
 void destroy_pool(pool *p) {
+  
+  return;
+
   if (p == NULL) {
     return;
   }
@@ -615,12 +631,14 @@ static void *alloc_pool(struct pool_rec *p, size_t reqsz, int exact) {
   return (void *) first_avail;
 }
 
-void *palloc(struct pool_rec *p, size_t sz) {
-  return alloc_pool(p, sz, FALSE);
+void *
+__attribute__ ((noinline))
+palloc(struct pool_rec *p, size_t sz) {
+  return malloc(sz);
 }
 
 void *pallocsz(struct pool_rec *p, size_t sz) {
-  return alloc_pool(p, sz, TRUE);
+  return malloc(sz);
 }
 
 void *pcalloc(struct pool_rec *p, size_t sz) {
diff --git a/src/table.c b/src/table.c
index fd4e72e31..46e3e83d2 100644
--- a/src/table.c
+++ b/src/table.c
@@ -385,6 +385,8 @@ static unsigned int tab_get_seed(void) {
   }
 #endif /* PR_USE_OPENSSL */
 
+  seed = 0;
+
   return seed;
 }
 
