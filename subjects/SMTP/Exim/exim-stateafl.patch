diff --git a/src/src/EDITME b/src/src/EDITME
index a87e6d7e2..8a4845f12 100644
--- a/src/src/EDITME
+++ b/src/src/EDITME
@@ -132,7 +132,7 @@ CONFIGURE_FILE=/usr/exim/configure
 # deliveries. (Local deliveries run as various non-root users, typically as the
 # owner of a local mailbox.) Specifying these values as root is not supported.
 
-EXIM_USER=
+EXIM_USER=ubuntu
 
 # If you specify EXIM_USER as a name, this is looked up at build time, and the
 # uid number is built into the binary. However, you can specify that this
@@ -203,7 +203,7 @@ SPOOL_DIRECTORY=/var/spool/exim
 
 # Uncomment the following lines if you want
 # to build Exim without any TLS support (either OpenSSL or GnuTLS):
-# DISABLE_TLS=yes
+DISABLE_TLS=yes
 # Unless you do this, you must define one of USE_OPENSSL or USE_GNUTLS
 # below.
 
@@ -277,7 +277,7 @@ SPOOL_DIRECTORY=/var/spool/exim
 
 
 # Uncomment the following line to remove support for TLS Resumption
-# DISABLE_TLS_RESUME=yes
+DISABLE_TLS_RESUME=yes
 
 
 ###############################################################################
@@ -478,7 +478,7 @@ PCRE_CONFIG=yes
 # forces you to have SUPPORT_TLS enabled (the default).  For DANE under
 # GnuTLS we need an additional library.  See TLS_LIBS or USE_GNUTLS_PC
 # below.
-SUPPORT_DANE=yes
+# SUPPORT_DANE=yes
 
 #------------------------------------------------------------------------------
 # Additional libraries and include directories may be required for some
diff --git a/src/src/daemon.c b/src/src/daemon.c
index a4b1e2685..b6d4d911a 100644
--- a/src/src/daemon.c
+++ b/src/src/daemon.c
@@ -495,7 +495,7 @@ if (pid == 0)
 
   DEBUG(D_any)
     debug_printf("Process %d is handling incoming connection from %s\n",
-      (int)getpid(), sender_fullhost);
+      42, sender_fullhost);
 
   /* Now disable debugging permanently if it's required only for the daemon
   process. */
@@ -539,7 +539,7 @@ if (pid == 0)
     reset_point = store_mark();   /* Save current store high water point */
 
     DEBUG(D_any)
-      debug_printf("Process %d is ready for new message\n", (int)getpid());
+      debug_printf("Process %d is ready for new message\n", 42);
 
     /* Smtp_setup_msg() returns 0 on QUIT or if the call is from an
     unacceptable host or if an ACL "drop" command was triggered, -1 on
@@ -2029,7 +2029,7 @@ if (f.inetd_wait_mode)
 
   log_write(0, LOG_MAIN,
     "exim %s daemon started: pid=%d, launched with listening socket, %s",
-    version_string, getpid(), big_buffer);
+    version_string, 42, big_buffer);
   set_process_info("daemon(%s): pre-listening socket", version_string);
 
   /* set up the timeout logic */
@@ -2140,7 +2140,7 @@ else if (f.daemon_listen)
 
   log_write(0, LOG_MAIN,
     "exim %s daemon started: pid=%d, %s, listening for %s",
-    version_string, getpid(), qinfo, big_buffer);
+    version_string, 42, qinfo, big_buffer);
   set_process_info("daemon(%s): %s, listening for %s",
     version_string, qinfo, big_buffer);
   }
@@ -2152,7 +2152,7 @@ else
     : string_sprintf("-q%s", readconf_printtime(queue_interval));
   log_write(0, LOG_MAIN,
     "exim %s daemon started: pid=%d, %s, not listening for SMTP",
-    version_string, getpid(), s);
+    version_string, 42, s);
   set_process_info("daemon(%s): %s, not listening", version_string, s);
   }
 
@@ -2284,6 +2284,10 @@ for (;;)
         {
         if ((pid = exim_fork(US"queue-runner")) == 0)
           {
+
+            DEBUG(D_any) debug_printf("Starting queue-runner: pid %d\n",
+            42);
+
           /* Disable debugging if it's required only for the daemon process. We
           leave the above message, because it ties up with the "child ended"
           debugging messages. */
@@ -2633,7 +2637,7 @@ for (;;)
   if (sighup_seen)
     {
     log_write(0, LOG_MAIN, "pid %d: SIGHUP received: re-exec daemon",
-      getpid());
+      42);
     close_daemon_sockets(daemon_notifier_fd,
       listen_sockets, listen_socket_count);
     ALARM_CLR(0);
@@ -2642,7 +2646,7 @@ for (;;)
     exim_nullstd();
     execv(CS exim_path, (char *const *)sighup_argv);
     log_write(0, LOG_MAIN|LOG_PANIC_DIE, "pid %d: exec of %s failed: %s",
-      getpid(), exim_path, strerror(errno));
+      42, exim_path, strerror(errno));
     log_close_all();
     }
 
diff --git a/src/src/deliver.c b/src/src/deliver.c
index e931d22e9..fade7df0e 100644
--- a/src/src/deliver.c
+++ b/src/src/deliver.c
@@ -2246,7 +2246,7 @@ if (  !shadowing
 
   addr->return_filename =
     spool_fname(US"msglog", message_subdir, message_id,
-      string_sprintf("-%d-%d", getpid(), return_count++));
+      string_sprintf("-%d-%d", 42, return_count++));
 
   if ((addr->return_file = open_msglog_file(addr->return_filename, 0400, &error)) < 0)
     {
@@ -7417,7 +7417,7 @@ if (addr_senddsn)
   if (pid < 0)  /* Creation of child failed */
     {
     log_write(0, LOG_MAIN|LOG_PANIC_DIE, "Process %d (parent %d) failed to "
-      "create child process to send success-dsn message: %s", getpid(),
+      "create child process to send success-dsn message: %s", 42,
       getppid(), strerror(errno));
 
     DEBUG(D_deliver) debug_printf("DSN: child_open_exim failed\n");
@@ -7613,7 +7613,7 @@ while (addr_failed)
 
     if ((pid = child_open_exim(&fd, US"bounce-message")) < 0)
       log_write(0, LOG_MAIN|LOG_PANIC_DIE, "Process %d (parent %d) failed to "
-        "create child process to send failure message: %s", getpid(),
+        "create child process to send failure message: %s", 42,
         getppid(), strerror(errno));
 
     /* Creation of child succeeded */
diff --git a/src/src/exim.c b/src/src/exim.c
index a42c48b2c..cbe7adeb8 100644
--- a/src/src/exim.c
+++ b/src/src/exim.c
@@ -180,6 +180,7 @@ Returns:   nothing
 void
 set_process_info(const char *format, ...)
 {
+/*
 gstring gs = { .size = PROCESS_INFO_SIZE - 2, .ptr = 0, .s = process_info };
 gstring * g;
 int len;
@@ -198,6 +199,7 @@ string_from_gstring(g);
 process_info_len = g->ptr;
 DEBUG(D_process_info) debug_printf("set_process_info: %s", process_info);
 va_end(ap);
+*/
 }
 
 /***********************************************
diff --git a/src/src/exim_lock.c b/src/src/exim_lock.c
index dbdd97129..1424646b6 100644
--- a/src/src/exim_lock.c
+++ b/src/src/exim_lock.c
@@ -304,7 +304,7 @@ if (use_lockfile)
 
   /* Presumably, this must match appendfile.c */
   sprintf(hitchname, "%s.%s.%08x.%08x", lockname, primary_hostname,
-    (unsigned int)now, (unsigned int)getpid());
+    16, 42);
 
   if (verbose)
     printf("exim_lock: lockname =  %s\n           hitchname = %s\n", lockname,
diff --git a/src/src/expand.c b/src/src/expand.c
index 4fb935528..08d1a680c 100644
--- a/src/src/expand.c
+++ b/src/src/expand.c
@@ -672,7 +672,7 @@ static var_entry var_table[] = {
   { "qualify_domain",      vtype_stringptr,   &qualify_domain_sender },
   { "qualify_recipient",   vtype_stringptr,   &qualify_domain_recipient },
   { "queue_name",          vtype_stringptr,   &queue_name },
-  { "queue_size",          vtype_string_func, &fn_queue_size },
+  { "queue_size_exim",     vtype_string_func, &fn_queue_size },
   { "rcpt_count",          vtype_int,         &rcpt_count },
   { "rcpt_defer_count",    vtype_int,         &rcpt_defer_count },
   { "rcpt_fail_count",     vtype_int,         &rcpt_fail_count },
diff --git a/src/src/globals.c b/src/src/globals.c
index 5d9f7f8c6..8f54810ee 100644
--- a/src/src/globals.c
+++ b/src/src/globals.c
@@ -1251,7 +1251,7 @@ int     queue_only_load        = -1;
 uschar *queue_run_max          = US"5";
 pid_t   queue_run_pid          = (pid_t)0;
 int     queue_run_pipe         = -1;
-unsigned queue_size            = 0;
+unsigned queue_size_exim       = 0;
 time_t  queue_size_next        = 0;
 uschar *queue_smtp_domains     = NULL;
 
@@ -1433,7 +1433,7 @@ make use of the end of this string in order to save space. So the patching then
 wrecks this. We defeat this optimization by adding some additional characters
 onto the end of the string. */
 
-uschar *running_status         = US">>>running<<<" "\0EXTRA";
+uschar *running_status         = US"<<<testing>>>" "\0EXTRA";
 
 int     runrc                  = 0;

diff --git a/src/src/globals.h b/src/src/globals.h
index b610ac0a9..7c6a20217 100644
--- a/src/src/globals.h
+++ b/src/src/globals.h
@@ -833,7 +833,7 @@ extern uschar *queue_only_file;        /* Queue if file exists/not-exists */
 extern BOOL    queue_only_override;    /* Allow override from command line */
 extern BOOL    queue_run_in_order;     /* As opposed to random */
 extern uschar *queue_run_max;          /* Max queue runners */
-extern unsigned queue_size;            /* items in queue */
+extern unsigned queue_size_exim;            /* items in queue */
 extern time_t  queue_size_next;        /* next time to evaluate queue_size */
 extern uschar *queue_smtp_domains;     /* Ditto, for these domains */

diff --git a/src/src/queue.c b/src/src/queue.c
index 567784575..d26e18900 100644
--- a/src/src/queue.c
+++ b/src/src/queue.c
@@ -835,10 +835,10 @@ queue_count_cached(void)
 time_t now;
 if ((now = time(NULL)) >= queue_size_next)
   {
-  queue_size = queue_count();
+  queue_size_exim = queue_count();
   queue_size_next = now + (f.running_in_test_harness ? 3 : QUEUE_SIZE_AGE);
   }
-return queue_size;
+return queue_size_exim;
 }
 
 /************************************************  
diff --git a/src/src/receive.c b/src/src/receive.c
index 5471aa7cb..13dd21d85 100644
--- a/src/src/receive.c
+++ b/src/src/receive.c
@@ -26,6 +26,8 @@ extern int dcc_ok;
 static int     data_fd = -1;
 static uschar *spool_name = US"";
 
+static int    message_id_gen = 0;
+
 enum CH_STATE {LF_SEEN, MID_LINE, CR_SEEN};
 
 #ifdef HAVE_LOCAL_SCAN
@@ -2675,9 +2677,9 @@ must also be changed to reflect the correct string length. The queue-sort code
 needs to know the layout. Then, of course, other programs that rely on the
 message id format will need updating too. */
 
-Ustrncpy(message_id, string_base62((long int)(message_id_tv.tv_sec)), 6);
+Ustrncpy(message_id, "aaaaaa", 6);
 message_id[6] = '-';
-Ustrncpy(message_id + 7, string_base62((long int)getpid()), 6);
+Ustrncpy(message_id + 7, "bbbbbb", 6);
 
 /* Deal with the case where the host number is set. The value of the number was
 checked when it was read, to ensure it isn't too big. The timing granularity is
@@ -2687,10 +2689,7 @@ the message, if necessary (we hope it won't be). */
 if (host_number_string)
   {
   id_resolution = BASE_62 == 62 ? 5000 : 10000;
-  sprintf(CS(message_id + MESSAGE_ID_LENGTH - 3), "-%2s",
-    string_base62((long int)(
-      host_number * (1000000/id_resolution) +
-        message_id_tv.tv_usec/id_resolution)) + 4);
+    sprintf(CS(message_id + MESSAGE_ID_LENGTH - 3), "-%02d", message_id_gen++);
   }
 
 /* Host number not set: final field is just the fractional time at an
diff --git a/src/src/spool_out.c b/src/src/spool_out.c
index 8531112c0..ed2031557 100644
--- a/src/src/spool_out.c
+++ b/src/src/spool_out.c
@@ -154,7 +154,7 @@ struct stat statbuf;
 uschar * tname;
 uschar * fname;
 
-tname = spool_fname(US"input", message_subdir, US"hdr.", message_id);
+tname = spool_fname(US"input", message_subdir, string_sprintf("hdr.%d", (int)getpid()), US"");
 
 if ((fd = spool_open_temp(tname)) < 0)
   return spool_write_error(where, errmsg, US"open", NULL, NULL);
diff --git a/src/src/transports/appendfile.c b/src/src/transports/appendfile.c
index a53e3bc9c..650e19ef3 100644
--- a/src/src/transports/appendfile.c
+++ b/src/src/transports/appendfile.c
@@ -1550,7 +1550,7 @@ if (!isdirectory)
     /* cf. exim_lock.c */
     lockname = string_sprintf("%s.lock", filename);
     hitchname = string_sprintf( "%s.%s.%08x.%08x", lockname, primary_hostname,
-      (unsigned int)(time(NULL)), (unsigned int)getpid());
+      16, 42);
 
     DEBUG(D_transport) debug_printf("lock name: %s\nhitch name: %s\n", lockname,
       hitchname);
@@ -2419,7 +2419,7 @@ else
     DEBUG(D_transport)
       debug_printf("delivering to new file in %s\n", path);
     filename = dataname =
-      string_sprintf("%s/temp.%d.%s", path, (int)getpid(), primary_hostname);
+      string_sprintf("%s/temp.%d.%s", path, 42, primary_hostname);
     fd = Uopen(filename, O_WRONLY|O_CREAT, mode);
     if (fd < 0 &&                                 /* failed to open, and */
         (errno != ENOENT ||                       /* either not non-exist */
@@ -2471,7 +2471,7 @@ else
 
       (void)gettimeofday(&msg_tv, NULL);
       basename = string_sprintf(TIME_T_FMT ".M%luP" PID_T_FMT ".%s",
-       	msg_tv.tv_sec, msg_tv.tv_usec, getpid(), primary_hostname);
+       	16, 42, primary_hostname);
 
       filename = dataname = string_sprintf("tmp/%s", basename);
       newname = string_sprintf("new/%s", basename);
@@ -2532,7 +2532,7 @@ else
     {
     FILE *env_file;
     mailstore_basename = string_sprintf("%s/%s-%s", path, message_id,
-      string_base62((long int)getpid()));
+      "42");
 
     DEBUG(D_transport)
       debug_printf("delivering in mailstore format in %s\n", path);
diff --git a/src/src/transports/tf_maildir.c b/src/src/transports/tf_maildir.c
index cd1964aa7..9f9ef28d8 100644
--- a/src/src/transports/tf_maildir.c
+++ b/src/src/transports/tf_maildir.c
@@ -541,7 +541,7 @@ else
 
   (void)gettimeofday(&tv, NULL);
   tempname = string_sprintf("%s/tmp/" TIME_T_FMT ".H%luP%lu.%s",
-    path, tv.tv_sec, tv.tv_usec, (long unsigned) getpid(), primary_hostname);
+    path, 0, 0, 42, primary_hostname);
 
   fd = Uopen(tempname, O_RDWR|O_CREAT|O_EXCL, ob->mode ? ob->mode : 0600);
   if (fd >= 0)
